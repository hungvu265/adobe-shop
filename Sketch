<template>
  <div class="main-text-to-images">
    <div class="main-text-form">
      <div class="form-config">
        <div class="form-content flex w-full">
          <div class="w-full">
            <p class="form-title">Nhập Prompt</p>
            <div class="prompt-content flex justify-between flex-column">
              <div class="input-form">
                <div class="label items-center flex align-items-center">
                  <div class="text">Nhập prompt mô tả ảnh</div>
                  <div style="margin: 0 0 5px 4px"><warning /></div>
                </div>
                <el-input
                    v-model="promptRef"
                    :autosize="{ minRows: 2, maxRows: 8 }"
                    maxlength="1000"
                    show-word-limit
                    type="textarea"
                    placeholder="Nhập mô tả"
                />
                <span v-if="isError" class="error">{{ promptErrorMessage }}</span>
              </div>
<!--              <div class="input-form">-->
<!--                <div class="label items-center flex align-items-center">-->
<!--                  <div class="text">Nhập prompt mô tả các yếu tố không xuất hiện trong ảnh</div>-->
<!--                  <div style="margin: 0 0 5px 4px"><warning /></div>-->
<!--                </div>-->
<!--                <el-input-->
<!--                    v-model="bodyData.negative_prompt"-->
<!--                    :autosize="{ minRows: 2, maxRows: 8 }"-->
<!--                    maxlength="100"-->
<!--                    show-word-limit-->
<!--                    type="textarea"-->
<!--                    placeholder="Nhập mô tả"-->
<!--                />-->
<!--              </div>-->

              <!-- Control mode -->
              <div class="w-50">
                <select-option
                    title="Control Mode"
                    :model="bodyData.control_mode"
                    :options="controlModeOption"
                    @update:model="(val) => updateControlMode(val)"
                />
              </div>
            </div>
            <div class="upload-img w-full">
              <!-- Draw canvas start -->
              <div class="w-full">
                <div class="source w-full">
                  <div class="mb-8 w-95">
                    <div class="container-image-draw">
                      <el-button
                          size="large"
                          class="btn_choose_type_image border-0"
                          style="width: 55%"
                          :class="{ active_button: !sketchInfo.isSketchDraw }"
                          @click="handleNormal"
                          :disabled="isLoading"
                      >Upload ảnh phác thảo
                      </el-button
                      >
                      <el-button
                          size="large"
                          class="btn_choose_type_image m-0 border-0"
                          style="width: 45%"
                          :class="{ active_button: sketchInfo.isSketchDraw }"
                          @click="handleInDraw"
                          :disabled="isLoading"
                      >Vẽ ảnh phác thảo
                      </el-button
                      >
                    </div>
                  </div>
                  <img v-show="showMaskImg"
                      :src="maskImg.src"
                       alt="img"
                       :style="{width: `${maskImg.width}px`, height: `${maskImg.height}px`}">
                  <vue-drawing-canvas
                      v-show="showCanvas"
                      ref="VueCanvasDrawing"
                      v-model:image="drawCanvas.image"
                      :width="drawCanvas.width"
                      :height="drawCanvas.height"
                      :stroke-type="drawCanvas.strokeType"
                      :line-cap="drawCanvas.lineCap"
                      :line-join="drawCanvas.lineJoin"
                      :fill-shape="drawCanvas.fillShape"
                      :eraser="drawCanvas.eraser"
                      :lineWidth="drawCanvas.line"
                      :color="drawCanvas.color"
                      :background-color="drawCanvas.backgroundColor"
                      :background-image="drawCanvas.backgroundImage"
                      :watermark="drawCanvas.watermark"
                      :initial-image="drawCanvas.initialImage"
                      saveAs="png"
                      :styles="{border: sketchInfo.isSketchDraw ? 'solid 1px #000' : ''}"
                      :lock="drawCanvas.disabled"
                      @mousemove="getCoordinate($event)"
                  />

                  <div
                      v-if="!sketchInfo.isUpload && !sketchInfo.isSketchDraw"
                      class="d-flex align-items-center"
                      style="width: 100%; height: 352px; cursor: pointer; padding-bottom: 50px"
                  >
                    <el-upload
                        ref="upload"
                        class="upload-demo"
                        drag
                        action="https://jsonplaceholder.typicode.com/posts/"
                        :auto-upload="false"
                        :limit="1"
                        :on-change="checkUpload"
                        accept=".png, .jpeg, .jpg"
                    >
                      <div class="el-upload__text d-flew flex-column">
                        <div>
                          <image-icon/>
                        </div>
                        <div id="description-upload">Kéo thả file hoặc click để tải ảnh</div>
                      </div>
                    </el-upload>
                    <div id="test"></div>
                  </div>
                  <div
                      class="flex justify-center items-center action-draw"
                      v-if="(sketchInfo.isUpload && !sketchInfo.isSketchDraw) || sketchInfo.isSketchDraw"
                  >

                    <!-- Clean draw -->
                    <div class="button-container" v-if="sketchInfo.isInPain">
                      <el-button @click.prevent="VueCanvasDrawing.reset()">
                        <eraser-icon/>
                      </el-button>
                    </div>

                    <!-- Stroke size -->
                    <div class="button-container" style="flex-wrap: wrap" v-if="sketchInfo.isInPain">
                      <el-button @click="sketchInfo.chooseLine = !sketchInfo.chooseLine">
                        <paint-brush-icon/>
                      </el-button>
                      <div class="choose_line" v-show="sketchInfo.chooseLine">
                        <input type="range" :min="1" :max="25" v-model="drawCanvas.line"/>
                      </div>
                    </div>

                    <!-- Undo draw -->
                    <div class="button-container" v-if="sketchInfo.isInPain">
                      <el-button @click.prevent="VueCanvasDrawing.undo()">
                        <undo-icon/>
                      </el-button>
                    </div>

                    <!-- Delete draw -->
                    <div class="button-container">
                      <el-button
                          v-if="sketchInfo.isUpload"
                          @click="handleRemoveDrawImage"
                      >
                        <trash-icon/>
                      </el-button>
                    </div>

                    <!-- Stroke color -->
                    <div class="flex justify-center items-center" style="gap: 4px">
                      <input id="stroke-color" type="color" v-model="drawCanvas.color"/>
                    </div>
                  </div>
                </div>
              </div>
              <div>
                <span v-if="fileErrorMessage !== ''" class="error">{{ fileErrorMessage }}</span>
              </div>
              <!-- Draw canvas end -->
            </div>
            <el-button
                :disabled="isLoading || !permission"
                @click="onSubmit()"
                class="button_submit"
                type="danger"
            >Tạo ảnh</el-button>
            <warning-permission v-if="!permission" />
          </div>
          <div class="w-full">
            <div>
              <p class="form-title">Kết quả</p>
              <div class="process-custom mb-2 p-0" v-if="isLoading">
                <el-progress
                    :percentage="percentage"
                    :stroke-width="20"
                    :text-inside="true"
                    :duration="1"
                    status="exception"
                    striped
                    striped-flow
                    color="#0060df"
                >
                  <span>{{ percentage }}%</span>
                </el-progress>
              </div>
            </div>
            <!-- Show Image -->
            <show-image-vue :images="images" :isLoading="isLoading" :obj-index="objIndex" @change-index="changeIndex" />
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import {reactive, ref} from "vue"
import {decodeBase64, translateVnToEng} from "~/helpers/ImageDetect"
import ShowImageVue from "./ShowImage.vue"
import AiGenarate from "~/services/AiGenarate"
import {MAX_LENGTH_NON_PROMPT, MAX_LENGTH_PROMPT} from "../../../helpers/localStorage"
import {useToast} from "vue-toastification"
import Warning from "../../icons/Warning.vue"
import PaintBrushIcon from "../../icons/PaintBrush.vue"
import ImageIcon from "../../icons/Image.vue"
import EraserIcon from "../../icons/Eraser.vue"
import TrashIcon from "../../icons/Trash.vue"
import VueDrawingCanvas from "vue-drawing-canvas"
import UndoIcon from "../../icons/Undo.vue"
import {dataURItoFile, validFile} from "../../../helpers/ImageDetect"
import WarningPermission from "~/components/common/WarningPermission.vue"
import SelectOption from "../../common/SelectOption.vue";
import {controlModeOption} from "../../../helpers/constant";
import {useStore} from "vuex";

const props = defineProps({
  permission: {
    type: Boolean,
    default: false,
  }})
const emits = defineEmits(['onLoading'])
const store = useStore()

const bodyData = reactive({
  prompt: "",
  negative_prompt: "",
  guidance_scale: 3.0,
  image_width: 1920,
  image_height: 1080,
  num_images: 1,
  seed: 42,
  prompt_styles: [],
  strength: 0.0,
  lora_names: [],
  control_mode: controlModeOption[0].value
})

const drawCanvas = reactive({
  image: '',
  x: 0,
  y: 0,
  width: 560,
  height: 315,
  strokeType: "dash",
  lineCap: "round",
  lineJoin: "round",
  fillShape: false,
  eraser: false,
  line: 5,
  color: "#000000",
  backgroundColor: "#FFFFFF",
  backgroundImage: null,
  watermark: null,
  disabled: false,
  initialImage: [],
})

const sketchInfo = reactive({
  isSketchDraw: false,
  upload: null,
  isUpload: false,
  chooseLine: false,
  isInPain: false
})

const maskImg = reactive({
  src: '',
  width: 560,
  height: 315
})

const toast = useToast()
const isError = ref(false)
const isLoading = ref(false)
const percentage = ref(0)
const objIndex = ref(0)
const images = ref([])
const promptRef = ref("")
const promptErrorMessage = ref("")
const fileErrorMessage = ref("")
const VueCanvasDrawing = ref(null)
const oldBackgroundImage = ref(null)
const currentImageDraw = ref("")
const showCanvas = ref(false)
const showMaskImg = ref(false)
const upload = ref(null)
const currentSizeImg = reactive({
  width: 1024,
  height: 1024
})
const canvasScale = reactive({
  width: 1024,
  height: 1024
})

const getCoordinate = (event) => {
  const coordinates = VueCanvasDrawing.value.getCoordinates(event);
  drawCanvas.x = coordinates.x;
  drawCanvas.y = coordinates.y;
}

const handleNormal = () => {
  VueCanvasDrawing.value.reset()
  sketchInfo.isInPain = true
  if (sketchInfo.isSketchDraw) showCanvas.value = false
  sketchInfo.isSketchDraw = false
  // Lưu thông tin trước khi chuyển tab
  // await saveBgImageAndStrokes()

  // Lấy thông tin đã được lưu
  // if (sketchInfo.isSketchDraw && !isEmpty(store.getters.gen_image.sketchUpload)) {
  //   await setBgImageAndStrokes()
  //   return
  // }
}

const handleInDraw = async () => {
  showCanvas.value = true
  drawCanvas.backgroundImage = null
  drawCanvas.width = 560
  drawCanvas.height = 315
  await VueCanvasDrawing.value.redraw()
  await VueCanvasDrawing.value.reset()

  sketchInfo.isUpload = false
  sketchInfo.upload = null
  sketchInfo.isInPain = true
  sketchInfo.isSketchDraw = true

  // Lưu thông tin trước khi chuyển tab
  // await saveBgImageAndStrokes()

  // Lấy thông tin đã được lưu
  // if (!sketchInfo.isSketchDraw && !isEmpty(store.getters.gen_image.sketchDraw)) {
  //   VueCanvasDrawing.value.images = JSON.parse(store.getters.gen_image.sketchDraw)
  // }
}

// const setBgImageAndStrokes = async () => {
//   const data = store.getters.gen_image.sketchUpload
//   setSizeCanvas(data.backgroundImage)
//   drawCanvas.backgroundImage = data.backgroundImage
//   VueCanvasDrawing.value.images = JSON.parse(data.strokes)
//
//   sketchInfo.isInPain = true
//   showCanvas.value = true
//   sketchInfo.isUpload = true
//   sketchInfo.isSketchDraw = false
//   await nextTick(() => {
//     VueCanvasDrawing.value.redraw()
//   })
// }

// const saveBgImageAndStrokes = async () => {
//   if (sketchInfo.isSketchDraw) {
//     await store.dispatch(ACTION_STORE_GEN_IMAGE, {
//       feature: 'sketchDraw',
//       data: JSON.stringify(VueCanvasDrawing.value.getAllStrokes())
//     })
//   } else {
//     await store.dispatch(ACTION_STORE_GEN_IMAGE, {
//       feature: 'sketchUpload',
//       data: {
//         'backgroundImage': drawCanvas.backgroundImage,
//         'strokes': JSON.stringify(VueCanvasDrawing.value.getAllStrokes())
//       }
//     })
//   }
//
//   await VueCanvasDrawing.value.reset()
// }

const handleRemoveDrawImage = async () => {
  VueCanvasDrawing.value.reset()
  sketchInfo.isUpload = false
  sketchInfo.upload = null
  isError.value = false
  showCanvas.value = false
  showMaskImg.value = false

  // Reset size canvas
  drawCanvas.width = 560
  drawCanvas.height = 315
}

const isValidate = () => {
  isError.value = false
  if (promptRef.value.trim().length === 0) {
    isError.value = true
    promptErrorMessage.value = "Prompt không được để trống!"
    return false
  }

  if (promptRef.value.length > MAX_LENGTH_PROMPT ||
      bodyData.negative_prompt.length > MAX_LENGTH_NON_PROMPT
  ) {
    toast.error('Ký tự vượt quá giới hạn. Kiểm tra lại thông tin.')
    return false
  }

  if (!sketchInfo.isUpload && !sketchInfo.isSketchDraw) {
    fileErrorMessage.value = 'Bạn chưa chọn ảnh!'
    return false
  }

  return true
}

const checkUpload = async (uploadFile, uploadFiles) => {
  if (!validFile(uploadFile.raw.name)) {
    fileErrorMessage.value = 'Chỉ tải lên file jpg/png/jpeg'
    upload.value.clearFiles()
    return
  }

  isError.value = false
  fileErrorMessage.value = ''
  const URL = window.URL
  await setSizeCanvas(URL.createObjectURL(uploadFile.raw))
  drawCanvas.backgroundImage = URL.createObjectURL(uploadFile.raw)
  await VueCanvasDrawing.value.redraw()
  sketchInfo.isUpload = true
  sketchInfo.isInPain = true
  showCanvas.value = true
}

const setSizeCanvas = (imageDataUrl) => {
  const img = new Image()
  img.src = imageDataUrl
  img.onload = () => {
    drawCanvas.width = img.width * drawCanvas.height / img.height

    // Lưu kích thước ảnh ban đầu
    currentSizeImg.width = img.width
    currentSizeImg.height = img.height

    // Lưu kích thước sau khi scale
    canvasScale.width = drawCanvas.width
    canvasScale.height = drawCanvas.height
  }
}

const resizeCanvas = async (width, height) => {
  const scale = Number((width / drawCanvas.width))
  drawCanvas.width = width
  drawCanvas.height = height

  const strokes = VueCanvasDrawing.value.getAllStrokes()
  strokes.forEach((stroke, index) => {
    stroke.width *= scale
    stroke.from.x *= scale
    stroke.from.y *= scale

    const coordinates = stroke.coordinates
    coordinates.forEach((coordinate, key) => {
      coordinate.x *= scale
      coordinate.y *= scale
    })
  })
  drawCanvas.initialImage = strokes
  await VueCanvasDrawing.value.redraw()
}

const onSubmit = async () => {
  if (await !isValidate()) {
    return
  }

  // Ẩn canvas và hiện thị ảnh thay cho canvas
  maskImg.src = drawCanvas.image
  maskImg.width = drawCanvas.width
  maskImg.height = drawCanvas.height
  showMaskImg.value = true
  showCanvas.value = false

  // Scale về kích thước ban đầu
  if (sketchInfo.isSketchDraw) {
    // Scale với option "Vẽ ảnh phác thảo"
    bodyData.image_width = 640
    bodyData.image_height = 360
    await resizeCanvas(640, 360)
  } else {
    // Scale với option "Upload ảnh phác thảo"
    bodyData.image_width = currentSizeImg.width
    bodyData.image_height = currentSizeImg.height
    await resizeCanvas(currentSizeImg.width, currentSizeImg.height)
  }

  percentage.value = 0
  isLoading.value = true
  images.value = []

  emits('onLoading', true)
  const promise_all = await Promise.all([
    translateVnToEng(promptRef.value),
    translateVnToEng(bodyData.negative_prompt),
  ])
  if (promise_all) {
    const negative_prompt_trans = promise_all[1] ? promise_all[1] : ""
    const promptConvert = promise_all[0]

    const dataForm = {
      ...bodyData,
      prompt: promptConvert,
      negative_prompt: negative_prompt_trans
    }

    try {
      let interval = setInterval(() => {
        percentage.value += Math.floor(Math.random() * 11)
        if (percentage.value >= 80) {
          clearInterval(interval)
        }
      }, 1500)

      const formData = new FormData()
      formData.append(
          "params",
          JSON.stringify({
            ...dataForm,
          })
      )
      const blob = await dataURItoFile(drawCanvas.image)
      const file = await new File([blob], 'file.png', { type: 'image/png' })
      formData.append("image", file)
      const res = await AiGenarate.textToImageControlnet(formData)
      if (res && res.status === 200) {
        const data = res.data

        if (data && data.images) {
          data.images.forEach(async (image) => {
            const currentImg = await decodeBase64(image)
            images.value.push(currentImg)
          })
          percentage.value = 100

          setTimeout(() => {
            isLoading.value = false
          }, 1000)
        }
      } else {
        isLoading.value = false
      }

      // Hiển thị canvas sau khi submit thành công
      showMaskImg.value = false
      showCanvas.value = true
      if (sketchInfo.isSketchDraw) {
        await resizeCanvas(560, 315)
      } else {
        await resizeCanvas(canvasScale.width, canvasScale.height)
      }
      emits('onLoading', false)
    } catch (error) {
      emits('onLoading', false)
      console.log("e", error)
    }
  }
}

const changeIndex = (index) => {
  objIndex.value = index
}

const updateControlMode = (value) => {
  bodyData.control_mode = value
}

</script>
<style lang="scss" scoped>
.form-title {
  font-weight: 700;
  color: #ee0033;
}

img {
  width: auto;
  height: 500px;
}

.upload-demo {
  width: 100%;
  height: 100%;
}

.source {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  background: white;
  padding: 8px 0 0 0;
  border: 1px dashed #e5e7eb;
  border-radius: 6px;
  position: relative;

  .btn_remove {
    position: absolute;
    top: 1%;
    right: 1%;
  }

  .action-draw {
    position: relative;
    width: 95%;
    justify-content: end;
  }

  .choose_line {
    position: absolute;
    top: -25px;
    right: 0;
  }

  .button-container {
    display: flex;
    flex-direction: row;
    position: relative;

    .el-button {
      width: 30px;
      border: 0;
    }

    .el-icon {
      font-size: 24px;
    }
  }

  .button-container > * {
    margin-top: 5px;
    margin-right: 10px;
  }
}

.active_button {
  background: #ee0033 !important;
  color: white !important;
}

.btn_choose_type_image {
  background: linear-gradient(to bottom right, #f3f4f6, #e5e7eb);
  color: #374151;
  font-family: "FS Magistral Medium", sans-serif;
  font-size: 12px;
  border-radius: 4px;
  height: 30px;
}

.container-image-draw {
  width: 50%;
  background: linear-gradient(to bottom right, #f3f4f6, #e5e7eb);
  border-radius: 12px;
}

#description-upload {
  font-size: 12px;
  font-family: "FS Magistral Medium Italic", sans-serif;
  color: #B5B4B4;
}

#stroke-color {
  width: 24px;
  height: 24px;
  border-radius: 50%;
  border: 1px solid rgb(153, 153, 153);
  padding: 2px;

  &::-webkit-color-swatch {
    border-radius: 50%;
  }
}
</style>
