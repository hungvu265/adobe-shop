<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Drag and Drop in a Row</title>
    <style>
        .container {
            display: flex;
            flex-direction: row;
            width: 100%;
            margin: 20px auto;
            padding: 10px;
            border: 1px solid #ccc;
        }

        .draggable-div {
            width: 100px;
            height: 50px;
            margin: 10px;
            background-color: lightblue;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: grab;
            border: 1px solid #000;
        }

        .dragging {
            opacity: 0.5;
        }

        .placeholder {
            width: 100px;
            height: 50px;
            margin: 10px;
            background-color: #f0f0f0;
            border: 1px dashed #000;
        }
    </style>
</head>
<body>
    <div class="container" id="divContainer">
        <div class="draggable-div" draggable="true">Div 1</div>
        <div class="draggable-div" draggable="true">Div 2</div>
        <div class="draggable-div" draggable="true">Div 3</div>
    </div>

    <script>
        const container = document.getElementById('divContainer');
        let draggedElement = null;
        let placeholder = document.createElement('div');
        placeholder.className = 'placeholder';

        container.addEventListener('dragstart', (e) => {
            if (e.target.classList.contains('draggable-div')) {
                draggedElement = e.target;
                e.target.classList.add('dragging');
                setTimeout(() => e.target.style.display = 'none', 0);
            }
        });

        container.addEventListener('dragend', (e) => {
            if (draggedElement) {
                draggedElement.style.display = 'flex';
                draggedElement.classList.remove('dragging');
                draggedElement.style.display = 'flex';
                if (container.contains(placeholder)) {
                    container.removeChild(placeholder);
                }
                draggedElement = null;
            }
        });

        container.addEventListener('dragover', (e) => {
            e.preventDefault();
            let target = e.target;
            if (target && target !== draggedElement && target.classList.contains('draggable-div')) {
                let rect = target.getBoundingClientRect();
                let offset = e.clientX - rect.left;
                if (offset > rect.width / 2) {
                    container.insertBefore(placeholder, target.nextSibling);
                } else {
                    container.insertBefore(placeholder, target);
                }
            }
        });

        container.addEventListener('drop', (e) => {
            e.preventDefault();
            if (draggedElement && container.contains(placeholder)) {
                container.replaceChild(draggedElement, placeholder);
                draggedElement.style.display = 'flex';
            }
        });
    </script>
</body>
</html>
